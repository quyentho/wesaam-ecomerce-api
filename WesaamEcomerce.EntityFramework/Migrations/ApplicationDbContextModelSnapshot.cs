// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WesaamEcomerce.Common.Enums;
using WesaamEcomerce.EntityFramework;
using WesaamEcomerce.EntityFramework.Models;

#nullable disable

namespace WesaamEcomerce.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "country", new[] { "sar", "aed" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "payment_type", new[] { "cod", "visa" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<List<Product>>("Products")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("products");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_carts_order_id");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<int?>("CartId")
                        .HasColumnType("integer")
                        .HasColumnName("cart_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsApply")
                        .HasColumnType("boolean")
                        .HasColumnName("is_apply");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("boolean")
                        .HasColumnName("is_publish");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<double?>("Percentage")
                        .HasColumnType("double precision")
                        .HasColumnName("percentage");

                    b.Property<string[]>("SellingCountries")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("selling_countries");

                    b.HasKey("Id")
                        .HasName("pk_coupons");

                    b.HasIndex("CartId")
                        .HasDatabaseName("ix_coupons_cart_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_coupons_order_id");

                    b.ToTable("coupons", (string)null);
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<PaymentType>("PaymentType")
                        .HasColumnType("payment_type")
                        .HasColumnName("payment_type");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CartId")
                        .HasDatabaseName("ix_orders_cart_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percentage");

                    b.Property<List<string>>("ImageUrls")
                        .HasColumnType("text[]")
                        .HasColumnName("image_urls");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<List<Country>>("SellingCountries")
                        .IsRequired()
                        .HasColumnType("country[]")
                        .HasColumnName("selling_countries");

                    b.Property<List<string>>("StoryImageUrls")
                        .HasColumnType("text[]")
                        .HasColumnName("story_image_urls");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Cart", b =>
                {
                    b.HasOne("WesaamEcomerce.EntityFramework.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_carts_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Coupon", b =>
                {
                    b.HasOne("WesaamEcomerce.EntityFramework.Models.Cart", null)
                        .WithMany("Coupons")
                        .HasForeignKey("CartId")
                        .HasConstraintName("fk_coupons_carts_cart_id");

                    b.HasOne("WesaamEcomerce.EntityFramework.Models.Order", null)
                        .WithMany("AppliedCoupons")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_coupons_orders_order_id");
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Order", b =>
                {
                    b.HasOne("WesaamEcomerce.EntityFramework.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_carts_cart_id");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Product", b =>
                {
                    b.HasOne("WesaamEcomerce.EntityFramework.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_products_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Cart", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WesaamEcomerce.EntityFramework.Models.Order", b =>
                {
                    b.Navigation("AppliedCoupons");
                });
#pragma warning restore 612, 618
        }
    }
}
